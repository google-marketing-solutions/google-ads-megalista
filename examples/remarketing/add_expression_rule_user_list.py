#!/usr/bin/env python
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Creates a rule-based user list.

The list will be defined by an expression rule for users who have visited two
different pages of a website.
"""

import argparse
import sys
from uuid import uuid4

from google.ads.google_ads.client import GoogleAdsClient
from google.ads.google_ads.errors import GoogleAdsException

URL_LIST = ["http://example.com/section1", "http://example.com/section2"]


def main(client, customer_id):
    """Creates a rule-based user list.

    The list will be defined by an expression rule for users who have visited
    two different pages of a website.

    Args:
        client: The Google Ads client.
        customer_id: The customer ID for which to add the user list.
    """
    # Get the UserListService client.
    user_list_service = client.get_service("UserListService", version="v6")

    user_list_rule_info = client.get_type("UserListRuleInfo", version="v6")

    # Combine the two rule items into a UserListRuleItemGroupInfo object so
    # Google Ads will AND their rules together. To instead OR the rules
    # together, each rule should be placed in its own rule item group.
    user_list_rule_item_group_info = user_list_rule_info.rule_item_groups.add()

    # Create rules targeting any user that visits the URLs in URL_LIST.
    for url in URL_LIST:
        user_list_rule_item_group_info.rule_items.append(
            _build_visited_site_rule_info(client, url)
        )

    # Creates an ExpressionRuleUserListInfo object, or a boolean rule that
    # defines this user list. The default rule_type for a UserListRuleInfo
    # object is OR of ANDs (disjunctive normal form). That is, rule items will
    # be ANDed together within rule item groups and the groups themselves will
    # be ORed together.
    expression_rule_user_list_info = client.get_type(
        "ExpressionRuleUserListInfo", version="v6"
    )
    expression_rule_user_list_info.rule.CopyFrom(user_list_rule_info)

    # Define a representation of a user list that is generated by a rule.
    rule_based_user_list_info = client.get_type(
        "RuleBasedUserListInfo", version="v6"
    )
    # Optional: To include past users in the user list, set the
    # prepopulation_status to REQUESTED.
    rule_based_user_list_info.prepopulation_status = client.get_type(
        "UserListPrepopulationStatusEnum", version="v6"
    ).REQUESTED
    rule_based_user_list_info.expression_rule_user_list.CopyFrom(
        expression_rule_user_list_info
    )

    # Create a UserListOperation and populate the UserList.
    user_list_operation = client.get_type("UserListOperation", version="v6")
    user_list = user_list_operation.create
    joined_urls = " AND ".join(URL_LIST)
    user_list.name = f"All visitors to {joined_urls} #{uuid4()}"
    user_list.description = f"Visitors of {joined_urls}"
    user_list.membership_status = client.get_type(
        "UserListMembershipStatusEnum", version="v6"
    ).OPEN
    user_list.membership_life_span = 365
    user_list.rule_based_user_list.CopyFrom(rule_based_user_list_info)

    try:
        # Issue a mutate request to add the user list, then print the results.
        response = user_list_service.mutate_user_lists(
            customer_id, [user_list_operation]
        )
        print(
            "Created expression rule user list with resource name "
            f"'{response.results[0].resource_name}.'"
        )
    except GoogleAdsException as ex:
        print(
            f"Request with ID '{ex.request_id}' failed with status "
            f"'{ex.error.code().name}' and includes the following errors:"
        )
        for error in ex.failure.errors:
            print(f"\tError with message '{error.message}'.")
            if error.location:
                for field_path_element in error.location.field_path_elements:
                    print(f"\t\tOn field: {field_path_element.field_name}")
        sys.exit(1)


def _build_visited_site_rule_info(client, url):
    """Creates a UserListRuleItemInfo object targeting a visit to a given URL.

    Args:
        client: An initialized Google Ads client.
        url: The URL at which the rule will be targeted.
    Returns:
        A populated UserListRuleItemInfo object.
    """
    user_visited_site_rule = client.get_type(
        "UserListRuleItemInfo", version="v6"
    )
    # Use a built-in parameter to create a domain URL rule.
    user_visited_site_rule.name = "url__"
    user_visited_site_rule.string_rule_item.operator = client.get_type(
        "UserListStringRuleItemOperatorEnum", version="v6"
    ).CONTAINS
    user_visited_site_rule.string_rule_item.value = url

    return user_visited_site_rule


if __name__ == "__main__":
    # GoogleAdsClient will read the google-ads.yaml configuration file in the
    # home directory if none is specified.
    google_ads_client = GoogleAdsClient.load_from_storage()

    parser = argparse.ArgumentParser(
        description="Creates a rule-based user list defined by an expression "
        "rule for users who have visited two different sections of a website."
    )
    # The following argument(s) should be provided to run the example.
    parser.add_argument(
        "-c",
        "--customer_id",
        type=str,
        required=True,
        help="The Google Ads customer ID.",
    )
    args = parser.parse_args()

    main(google_ads_client, args.customer_id)
